// Pin definitions
const int clk = 13;       // Clock signal (output)
const int RValid = 12;    // Valid signal (input)
const int RReady = 11;    // Ready signal (output)
const int RData = 10;   // Data signal (input)
const int clock_half_period = 10;

void setup() {
  pinMode(clk, OUTPUT);
  pinMode(RValid, INPUT);
  pinMode(RReady, OUTPUT);
  pinMode(RData, INPUT);
  
  digitalWrite(clk, LOW);
  digitalWrite(RReady, LOW);
  Serial.begin(9600);
}

void loop() {
  read();
}

int read() {
  // State variables
  int receiving = 0;
  int i = 0;

  // Begin with not ready
  digitalWrite(clk, LOW);
  digitalWrite(RReady, LOW);
  
  // Rising clock - do one cycle for fun
  delay(clock_half_period);
  digitalWrite(clk, HIGH);
  delay(clock_half_period);
  digitalWrite(clk, LOW);

  // Set ready
  digitalWrite(RReady, HIGH); // Indicate ready to receive
  delay(clock_half_period);
  int receivedData[14];
  int current_data;

  // Loop:
  while (1){
    // Read data and valid status before edge
    current_data = digitalRead(RData);
    if (!receiving) receiving = digitalRead(RValid);

    // Rising edge and falling edge
    digitalWrite(clk, HIGH);
    delay(clock_half_period);
    digitalWrite(clk, LOW);

    // load in data
    if (receiving) {
      digitalWrite(RReady, LOW);
      receivedData[i++] = current_data;
    }
    if (i >= 14) {
      break;
    }
  }

  Serial.println("Data read from Raspberry Pi.");
  int num_received = 0;
  for(int j = 0; j < 14; j++){
    Serial.print(receivedData[j]);
    Serial.print(" ");
    num_received += receivedData[j] << j;
  }
  Serial.print("\t");
  Serial.println(num_received);
  return 0; // Return success
}
