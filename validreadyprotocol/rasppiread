import RPi.GPIO as GPIO
import time

# Pin definitions
CLK_PIN = 17    # GPIO pin for clock signal (input)
VALID_PIN = 27  # GPIO pin for valid signal (input)
READY_PIN = 22  # GPIO pin for ready signal (output)
DATA_PIN = 23   # GPIO pin for data signal (input)

# Initialize GPIO
GPIO.setmode(GPIO.BCM)
GPIO.setup(CLK_PIN, GPIO.IN)     # Clock signal (input)
GPIO.setup(VALID_PIN, GPIO.IN)   # Valid signal (input)
GPIO.setup(READY_PIN, GPIO.OUT)  # Ready signal (output)
GPIO.setup(DATA_PIN, GPIO.IN)    # Data signal (input)

def read_from_arduino(bits_to_receive=14):
    # Variables
    last_clk = GPIO.input(CLK_PIN)  # Store the last clock state
    receiving = False               # Flag to indicate if data is being received
    databank = []                   # List to store received data
    i = 0                           # Counter for received data bits

    # Set initial state of READY signal
    GPIO.output(READY_PIN, GPIO.HIGH)  # Ready to receive data

    while True:
        # read the current data value, before clock edge.
        current_data = GPIO.input(DATA_PIN)
        # Read current clock state
        current_clk = GPIO.input(CLK_PIN)
        # Read valid signal
        valid = GPIO.input(VALID_PIN)

        # Check for clock edge (rising edge: last_clk = 0, current_clk = 1)
        if last_clk == GPIO.LOW and current_clk == GPIO.HIGH:
            if valid == GPIO.HIGH:
                # Start receiving data
                receiving = True
                GPIO.output(READY_PIN, GPIO.LOW)  # Not ready for new data
                # print("RPi: Started receiving data...")

            if receiving:
                databank.append(current_data)  # Store data in databank
                i += 1

        # Check if 14 bits have been received
        if i >= bits_to_receive:
            print(f"RPi: Received {bits_to_receive} bits of data:", databank)
            return databank

        # Update last clock state
        last_clk = current_clk
print(read_from_arduino())
