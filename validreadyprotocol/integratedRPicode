import RPi.GPIO as GPIO
import time

# Pin definitions
clk = 17       # Clock signal (Pi drives during write, Arduino during read)
WValid = 27    # Valid signal (Pi drives during write, Arduino during read)
WReady = 22    # Ready signal (Pi drives during read, Arduino during write)
datapin = 23   # Data signal (Pi drives during write, Arduino during read)

def setup_gpio(mode):
    GPIO.setmode(GPIO.BCM)
    if mode == "write":
        GPIO.setup(clk, GPIO.OUT)
        GPIO.setup(WValid, GPIO.OUT)
        GPIO.setup(WReady, GPIO.IN)
        GPIO.setup(datapin, GPIO.OUT)
    elif mode == "read":
        GPIO.setup(clk, GPIO.IN)
        GPIO.setup(WValid, GPIO.IN)
        GPIO.setup(WReady, GPIO.OUT)
        GPIO.setup(datapin, GPIO.IN)
    GPIO.output(clk, GPIO.LOW)
    GPIO.output(WValid, GPIO.LOW)
    GPIO.output(WReady, GPIO.LOW)
    GPIO.output(datapin, GPIO.LOW)

def write_to_arduino():
    setup_gpio("write")
    data = [1,0,1,0,1,0,1,0,1,0,1,0,1,0]  # Example data
    i = 0
    timeout = False
    start_time = time.time()

    # Start handshake
    GPIO.output(WValid, GPIO.HIGH)
    GPIO.output(datapin, data[i])
    i += 1

    while i < len(data):
        # Generate clock pulse
        GPIO.output(clk, GPIO.HIGH)
        time.sleep(0.001)
        GPIO.output(clk, GPIO.LOW)
        time.sleep(0.001)

        # Check if Arduino is ready
        if GPIO.input(WReady) == GPIO.HIGH:
            GPIO.output(datapin, data[i])
            i += 1

        # Timeout after 2 seconds
        if time.time() - start_time > 2:
            timeout = True
            break

    GPIO.output(WValid, GPIO.LOW)
    GPIO.cleanup()
    if timeout: print("Write timeout!")
    else: print("Data sent to Arduino.")

def read_from_arduino():
    setup_gpio("read")
    received_data = []
    i = 0
    timeout = False
    start_time = time.time()

    # Signal readiness
    GPIO.output(WReady, GPIO.HIGH)

    while i < 14:
        # Wait for rising edge of clk (Arduino-generated)
        if GPIO.input(clk) == GPIO.HIGH:
            # Check if valid
            if GPIO.input(WValid) == GPIO.HIGH:
                received_data.append(GPIO.input(datapin))
                i += 1
            # Debounce
            while GPIO.input(clk) == GPIO.HIGH

        # Timeout after 2 seconds
        if time.time() - start_time > 2:
            timeout = True
            break

    GPIO.output(WReady, GPIO.LOW)
    GPIO.cleanup()
    if timeout: print("Read timeout!")
    else: print("Received:", received_data)

if __name__ == "__main__":
    while True:
        write_to_arduino()
        read_from_arduino()
